
000_LED_Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003034  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080031f8  080031f8  000041f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003210  08003210  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003210  08003210  00004210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003218  08003218  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003218  08003218  00004218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800321c  0800321c  0000421c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003220  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  2000000c  0800322c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  0800322c  00005558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfc4  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c9f  00000000  00000000  00011000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  00012ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000797  00000000  00000000  00013688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020cb5  00000000  00000000  00013e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c603  00000000  00000000  00034ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c70cf  00000000  00000000  000410d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001081a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002908  00000000  00000000  001081ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  0010aaf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080031e0 	.word	0x080031e0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080031e0 	.word	0x080031e0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fada 	bl	8000aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f814 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f8d6 	bl	80006ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000540:	f000 f87c 	bl	800063c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000544:	f000 f8a4 	bl	8000690 <MX_USB_OTG_FS_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000548:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800054c:	4804      	ldr	r0, [pc, #16]	@ (8000560 <main+0x30>)
 800054e:	f000 fdf6 	bl	800113e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000552:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000556:	f000 fb3b 	bl	8000bd0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800055a:	bf00      	nop
 800055c:	e7f4      	b.n	8000548 <main+0x18>
 800055e:	bf00      	nop
 8000560:	40020400 	.word	0x40020400

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	@ 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 031c 	add.w	r3, r7, #28
 800056e:	2234      	movs	r2, #52	@ 0x34
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f002 fe07 	bl	8003186 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 0308 	add.w	r3, r7, #8
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b29      	ldr	r3, [pc, #164]	@ (8000634 <SystemClock_Config+0xd0>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000590:	4a28      	ldr	r2, [pc, #160]	@ (8000634 <SystemClock_Config+0xd0>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	@ 0x40
 8000598:	4b26      	ldr	r3, [pc, #152]	@ (8000634 <SystemClock_Config+0xd0>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a4:	2300      	movs	r3, #0
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	4b23      	ldr	r3, [pc, #140]	@ (8000638 <SystemClock_Config+0xd4>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a22      	ldr	r2, [pc, #136]	@ (8000638 <SystemClock_Config+0xd4>)
 80005ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b20      	ldr	r3, [pc, #128]	@ (8000638 <SystemClock_Config+0xd4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c0:	2301      	movs	r3, #1
 80005c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005c4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d4:	2304      	movs	r3, #4
 80005d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005d8:	23a8      	movs	r3, #168	@ 0xa8
 80005da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e0:	2307      	movs	r3, #7
 80005e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 fd6f 	bl	80020d0 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005f8:	f000 f926 	bl	8000848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2302      	movs	r3, #2
 8000602:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000608:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800060c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000612:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	2105      	movs	r1, #5
 800061a:	4618      	mov	r0, r3
 800061c:	f000 fee4 	bl	80013e8 <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000626:	f000 f90f 	bl	8000848 <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3750      	adds	r7, #80	@ 0x50
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000640:	4b11      	ldr	r3, [pc, #68]	@ (8000688 <MX_USART3_UART_Init+0x4c>)
 8000642:	4a12      	ldr	r2, [pc, #72]	@ (800068c <MX_USART3_UART_Init+0x50>)
 8000644:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000646:	4b10      	ldr	r3, [pc, #64]	@ (8000688 <MX_USART3_UART_Init+0x4c>)
 8000648:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800064c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800064e:	4b0e      	ldr	r3, [pc, #56]	@ (8000688 <MX_USART3_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000654:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <MX_USART3_UART_Init+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800065a:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <MX_USART3_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000660:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <MX_USART3_UART_Init+0x4c>)
 8000662:	220c      	movs	r2, #12
 8000664:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000666:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <MX_USART3_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800066c:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <MX_USART3_UART_Init+0x4c>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000672:	4805      	ldr	r0, [pc, #20]	@ (8000688 <MX_USART3_UART_Init+0x4c>)
 8000674:	f001 ffca 	bl	800260c <HAL_UART_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800067e:	f000 f8e3 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000028 	.word	0x20000028
 800068c:	40004800 	.word	0x40004800

08000690 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000694:	4b14      	ldr	r3, [pc, #80]	@ (80006e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000696:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800069a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800069c:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800069e:	2206      	movs	r2, #6
 80006a0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006a4:	2202      	movs	r2, #2
 80006a6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006b0:	2202      	movs	r2, #2
 80006b2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	@ (80006e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80006c0:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	@ (80006e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80006cc:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	@ (80006e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006d4:	f000 fd4d 	bl	8001172 <HAL_PCD_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80006de:	f000 f8b3 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000070 	.word	0x20000070

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08c      	sub	sp, #48	@ 0x30
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
 8000706:	4b4c      	ldr	r3, [pc, #304]	@ (8000838 <MX_GPIO_Init+0x14c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4a4b      	ldr	r2, [pc, #300]	@ (8000838 <MX_GPIO_Init+0x14c>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6313      	str	r3, [r2, #48]	@ 0x30
 8000712:	4b49      	ldr	r3, [pc, #292]	@ (8000838 <MX_GPIO_Init+0x14c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	61bb      	str	r3, [r7, #24]
 800071c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	4b45      	ldr	r3, [pc, #276]	@ (8000838 <MX_GPIO_Init+0x14c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a44      	ldr	r2, [pc, #272]	@ (8000838 <MX_GPIO_Init+0x14c>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b42      	ldr	r3, [pc, #264]	@ (8000838 <MX_GPIO_Init+0x14c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b3e      	ldr	r3, [pc, #248]	@ (8000838 <MX_GPIO_Init+0x14c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a3d      	ldr	r2, [pc, #244]	@ (8000838 <MX_GPIO_Init+0x14c>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b3b      	ldr	r3, [pc, #236]	@ (8000838 <MX_GPIO_Init+0x14c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b37      	ldr	r3, [pc, #220]	@ (8000838 <MX_GPIO_Init+0x14c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a36      	ldr	r2, [pc, #216]	@ (8000838 <MX_GPIO_Init+0x14c>)
 8000760:	f043 0308 	orr.w	r3, r3, #8
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b34      	ldr	r3, [pc, #208]	@ (8000838 <MX_GPIO_Init+0x14c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0308 	and.w	r3, r3, #8
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b30      	ldr	r3, [pc, #192]	@ (8000838 <MX_GPIO_Init+0x14c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a2f      	ldr	r2, [pc, #188]	@ (8000838 <MX_GPIO_Init+0x14c>)
 800077c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b2d      	ldr	r3, [pc, #180]	@ (8000838 <MX_GPIO_Init+0x14c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b29      	ldr	r3, [pc, #164]	@ (8000838 <MX_GPIO_Init+0x14c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a28      	ldr	r2, [pc, #160]	@ (8000838 <MX_GPIO_Init+0x14c>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b26      	ldr	r3, [pc, #152]	@ (8000838 <MX_GPIO_Init+0x14c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f244 0181 	movw	r1, #16513	@ 0x4081
 80007b0:	4822      	ldr	r0, [pc, #136]	@ (800083c <MX_GPIO_Init+0x150>)
 80007b2:	f000 fcab 	bl	800110c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2140      	movs	r1, #64	@ 0x40
 80007ba:	4821      	ldr	r0, [pc, #132]	@ (8000840 <MX_GPIO_Init+0x154>)
 80007bc:	f000 fca6 	bl	800110c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	4619      	mov	r1, r3
 80007d6:	481b      	ldr	r0, [pc, #108]	@ (8000844 <MX_GPIO_Init+0x158>)
 80007d8:	f000 fb04 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007dc:	f244 0381 	movw	r3, #16513	@ 0x4081
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	4811      	ldr	r0, [pc, #68]	@ (800083c <MX_GPIO_Init+0x150>)
 80007f6:	f000 faf5 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007fa:	2340      	movs	r3, #64	@ 0x40
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	4619      	mov	r1, r3
 8000810:	480b      	ldr	r0, [pc, #44]	@ (8000840 <MX_GPIO_Init+0x154>)
 8000812:	f000 fae7 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000816:	2380      	movs	r3, #128	@ 0x80
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_GPIO_Init+0x154>)
 800082a:	f000 fadb 	bl	8000de4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800082e:	bf00      	nop
 8000830:	3730      	adds	r7, #48	@ 0x30
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	40020400 	.word	0x40020400
 8000840:	40021800 	.word	0x40021800
 8000844:	40020800 	.word	0x40020800

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <Error_Handler+0x8>

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <HAL_MspInit+0x4c>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000862:	4a0f      	ldr	r2, [pc, #60]	@ (80008a0 <HAL_MspInit+0x4c>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000868:	6453      	str	r3, [r2, #68]	@ 0x44
 800086a:	4b0d      	ldr	r3, [pc, #52]	@ (80008a0 <HAL_MspInit+0x4c>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800086e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <HAL_MspInit+0x4c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	4a08      	ldr	r2, [pc, #32]	@ (80008a0 <HAL_MspInit+0x4c>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000884:	6413      	str	r3, [r2, #64]	@ 0x40
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <HAL_MspInit+0x4c>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800

080008a4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	@ 0x28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a19      	ldr	r2, [pc, #100]	@ (8000928 <HAL_UART_MspInit+0x84>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d12c      	bne.n	8000920 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	4b18      	ldr	r3, [pc, #96]	@ (800092c <HAL_UART_MspInit+0x88>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ce:	4a17      	ldr	r2, [pc, #92]	@ (800092c <HAL_UART_MspInit+0x88>)
 80008d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d6:	4b15      	ldr	r3, [pc, #84]	@ (800092c <HAL_UART_MspInit+0x88>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b11      	ldr	r3, [pc, #68]	@ (800092c <HAL_UART_MspInit+0x88>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a10      	ldr	r2, [pc, #64]	@ (800092c <HAL_UART_MspInit+0x88>)
 80008ec:	f043 0308 	orr.w	r3, r3, #8
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <HAL_UART_MspInit+0x88>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0308 	and.w	r3, r3, #8
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090c:	2303      	movs	r3, #3
 800090e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000910:	2307      	movs	r3, #7
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	4805      	ldr	r0, [pc, #20]	@ (8000930 <HAL_UART_MspInit+0x8c>)
 800091c:	f000 fa62 	bl	8000de4 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000920:	bf00      	nop
 8000922:	3728      	adds	r7, #40	@ 0x28
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40004800 	.word	0x40004800
 800092c:	40023800 	.word	0x40023800
 8000930:	40020c00 	.word	0x40020c00

08000934 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b0a0      	sub	sp, #128	@ 0x80
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	225c      	movs	r2, #92	@ 0x5c
 8000952:	2100      	movs	r1, #0
 8000954:	4618      	mov	r0, r3
 8000956:	f002 fc16 	bl	8003186 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000962:	d14e      	bne.n	8000a02 <HAL_PCD_MspInit+0xce>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000964:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000968:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800096a:	2300      	movs	r3, #0
 800096c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800096e:	f107 0310 	add.w	r3, r7, #16
 8000972:	4618      	mov	r0, r3
 8000974:	f000 fe52 	bl	800161c <HAL_RCCEx_PeriphCLKConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800097e:	f7ff ff63 	bl	8000848 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	4b21      	ldr	r3, [pc, #132]	@ (8000a0c <HAL_PCD_MspInit+0xd8>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a20      	ldr	r2, [pc, #128]	@ (8000a0c <HAL_PCD_MspInit+0xd8>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b1e      	ldr	r3, [pc, #120]	@ (8000a0c <HAL_PCD_MspInit+0xd8>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800099e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80009a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ac:	2303      	movs	r3, #3
 80009ae:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009b0:	230a      	movs	r3, #10
 80009b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80009b8:	4619      	mov	r1, r3
 80009ba:	4815      	ldr	r0, [pc, #84]	@ (8000a10 <HAL_PCD_MspInit+0xdc>)
 80009bc:	f000 fa12 	bl	8000de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80009d2:	4619      	mov	r1, r3
 80009d4:	480e      	ldr	r0, [pc, #56]	@ (8000a10 <HAL_PCD_MspInit+0xdc>)
 80009d6:	f000 fa05 	bl	8000de4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80009da:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <HAL_PCD_MspInit+0xd8>)
 80009dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009de:	4a0b      	ldr	r2, [pc, #44]	@ (8000a0c <HAL_PCD_MspInit+0xd8>)
 80009e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009e4:	6353      	str	r3, [r2, #52]	@ 0x34
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <HAL_PCD_MspInit+0xd8>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ee:	4a07      	ldr	r2, [pc, #28]	@ (8000a0c <HAL_PCD_MspInit+0xd8>)
 80009f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009f6:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <HAL_PCD_MspInit+0xd8>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000a02:	bf00      	nop
 8000a04:	3780      	adds	r7, #128	@ 0x80
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020000 	.word	0x40020000

08000a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <NMI_Handler+0x4>

08000a1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <HardFault_Handler+0x4>

08000a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <MemManage_Handler+0x4>

08000a2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6a:	f000 f891 	bl	8000b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <SystemInit+0x20>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a7e:	4a05      	ldr	r2, [pc, #20]	@ (8000a94 <SystemInit+0x20>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ad0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a9c:	f7ff ffea 	bl	8000a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aa0:	480c      	ldr	r0, [pc, #48]	@ (8000ad4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aa2:	490d      	ldr	r1, [pc, #52]	@ (8000ad8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000adc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa8:	e002      	b.n	8000ab0 <LoopCopyDataInit>

08000aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aae:	3304      	adds	r3, #4

08000ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab4:	d3f9      	bcc.n	8000aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ab8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ae4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000abc:	e001      	b.n	8000ac2 <LoopFillZerobss>

08000abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac0:	3204      	adds	r2, #4

08000ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac4:	d3fb      	bcc.n	8000abe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ac6:	f002 fb67 	bl	8003198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aca:	f7ff fd31 	bl	8000530 <main>
  bx  lr    
 8000ace:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ad0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000adc:	08003220 	.word	0x08003220
  ldr r2, =_sbss
 8000ae0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ae4:	20000558 	.word	0x20000558

08000ae8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae8:	e7fe      	b.n	8000ae8 <ADC_IRQHandler>
	...

08000aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <HAL_Init+0x40>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b2c <HAL_Init+0x40>)
 8000af6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000afc:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <HAL_Init+0x40>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <HAL_Init+0x40>)
 8000b02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b08:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <HAL_Init+0x40>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a07      	ldr	r2, [pc, #28]	@ (8000b2c <HAL_Init+0x40>)
 8000b0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b14:	2003      	movs	r0, #3
 8000b16:	f000 f931 	bl	8000d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f000 f808 	bl	8000b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b20:	f7ff fe98 	bl	8000854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023c00 	.word	0x40023c00

08000b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b38:	4b12      	ldr	r3, [pc, #72]	@ (8000b84 <HAL_InitTick+0x54>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <HAL_InitTick+0x58>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	4619      	mov	r1, r3
 8000b42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 f93b 	bl	8000dca <HAL_SYSTICK_Config>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e00e      	b.n	8000b7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b0f      	cmp	r3, #15
 8000b62:	d80a      	bhi.n	8000b7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b64:	2200      	movs	r2, #0
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b6c:	f000 f911 	bl	8000d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b70:	4a06      	ldr	r2, [pc, #24]	@ (8000b8c <HAL_InitTick+0x5c>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b76:	2300      	movs	r3, #0
 8000b78:	e000      	b.n	8000b7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000000 	.word	0x20000000
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	20000004 	.word	0x20000004

08000b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <HAL_IncTick+0x20>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <HAL_IncTick+0x24>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a04      	ldr	r2, [pc, #16]	@ (8000bb4 <HAL_IncTick+0x24>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	20000554 	.word	0x20000554

08000bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	@ (8000bcc <HAL_GetTick+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000554 	.word	0x20000554

08000bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd8:	f7ff ffee 	bl	8000bb8 <HAL_GetTick>
 8000bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000be8:	d005      	beq.n	8000bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bea:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <HAL_Delay+0x44>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bf6:	bf00      	nop
 8000bf8:	f7ff ffde 	bl	8000bb8 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d8f7      	bhi.n	8000bf8 <HAL_Delay+0x28>
  {
  }
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000008 	.word	0x20000008

08000c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c28:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4a:	4a04      	ldr	r2, [pc, #16]	@ (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60d3      	str	r3, [r2, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	@ (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	db0a      	blt.n	8000ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	490c      	ldr	r1, [pc, #48]	@ (8000cc8 <__NVIC_SetPriority+0x4c>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca4:	e00a      	b.n	8000cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4908      	ldr	r1, [pc, #32]	@ (8000ccc <__NVIC_SetPriority+0x50>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	3b04      	subs	r3, #4
 8000cb4:	0112      	lsls	r2, r2, #4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	761a      	strb	r2, [r3, #24]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	@ 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f1c3 0307 	rsb	r3, r3, #7
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf28      	it	cs
 8000cee:	2304      	movcs	r3, #4
 8000cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d902      	bls.n	8000d00 <NVIC_EncodePriority+0x30>
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3b03      	subs	r3, #3
 8000cfe:	e000      	b.n	8000d02 <NVIC_EncodePriority+0x32>
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43d9      	mvns	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	4313      	orrs	r3, r2
         );
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3724      	adds	r7, #36	@ 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d48:	d301      	bcc.n	8000d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00f      	b.n	8000d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d78 <SysTick_Config+0x40>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d56:	210f      	movs	r1, #15
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d5c:	f7ff ff8e 	bl	8000c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d60:	4b05      	ldr	r3, [pc, #20]	@ (8000d78 <SysTick_Config+0x40>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d66:	4b04      	ldr	r3, [pc, #16]	@ (8000d78 <SysTick_Config+0x40>)
 8000d68:	2207      	movs	r2, #7
 8000d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	e000e010 	.word	0xe000e010

08000d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ff47 	bl	8000c18 <__NVIC_SetPriorityGrouping>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b086      	sub	sp, #24
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000da4:	f7ff ff5c 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 8000da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	68b9      	ldr	r1, [r7, #8]
 8000dae:	6978      	ldr	r0, [r7, #20]
 8000db0:	f7ff ff8e 	bl	8000cd0 <NVIC_EncodePriority>
 8000db4:	4602      	mov	r2, r0
 8000db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff5d 	bl	8000c7c <__NVIC_SetPriority>
}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffb0 	bl	8000d38 <SysTick_Config>
 8000dd8:	4603      	mov	r3, r0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	@ 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
 8000dfe:	e165      	b.n	80010cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e00:	2201      	movs	r2, #1
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	697a      	ldr	r2, [r7, #20]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	f040 8154 	bne.w	80010c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0303 	and.w	r3, r3, #3
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d005      	beq.n	8000e36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d130      	bne.n	8000e98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	2203      	movs	r2, #3
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	68da      	ldr	r2, [r3, #12]
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	091b      	lsrs	r3, r3, #4
 8000e82:	f003 0201 	and.w	r2, r3, #1
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0303 	and.w	r3, r3, #3
 8000ea0:	2b03      	cmp	r3, #3
 8000ea2:	d017      	beq.n	8000ed4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	2203      	movs	r2, #3
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	689a      	ldr	r2, [r3, #8]
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0303 	and.w	r3, r3, #3
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d123      	bne.n	8000f28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	08da      	lsrs	r2, r3, #3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3208      	adds	r2, #8
 8000ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	f003 0307 	and.w	r3, r3, #7
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	220f      	movs	r2, #15
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	691a      	ldr	r2, [r3, #16]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	08da      	lsrs	r2, r3, #3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3208      	adds	r2, #8
 8000f22:	69b9      	ldr	r1, [r7, #24]
 8000f24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 0203 	and.w	r2, r3, #3
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f000 80ae 	beq.w	80010c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b5d      	ldr	r3, [pc, #372]	@ (80010e4 <HAL_GPIO_Init+0x300>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f72:	4a5c      	ldr	r2, [pc, #368]	@ (80010e4 <HAL_GPIO_Init+0x300>)
 8000f74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f7a:	4b5a      	ldr	r3, [pc, #360]	@ (80010e4 <HAL_GPIO_Init+0x300>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f86:	4a58      	ldr	r2, [pc, #352]	@ (80010e8 <HAL_GPIO_Init+0x304>)
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	089b      	lsrs	r3, r3, #2
 8000f8c:	3302      	adds	r3, #2
 8000f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f003 0303 	and.w	r3, r3, #3
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4f      	ldr	r2, [pc, #316]	@ (80010ec <HAL_GPIO_Init+0x308>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d025      	beq.n	8000ffe <HAL_GPIO_Init+0x21a>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4e      	ldr	r2, [pc, #312]	@ (80010f0 <HAL_GPIO_Init+0x30c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d01f      	beq.n	8000ffa <HAL_GPIO_Init+0x216>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4d      	ldr	r2, [pc, #308]	@ (80010f4 <HAL_GPIO_Init+0x310>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d019      	beq.n	8000ff6 <HAL_GPIO_Init+0x212>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a4c      	ldr	r2, [pc, #304]	@ (80010f8 <HAL_GPIO_Init+0x314>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d013      	beq.n	8000ff2 <HAL_GPIO_Init+0x20e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a4b      	ldr	r2, [pc, #300]	@ (80010fc <HAL_GPIO_Init+0x318>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d00d      	beq.n	8000fee <HAL_GPIO_Init+0x20a>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a4a      	ldr	r2, [pc, #296]	@ (8001100 <HAL_GPIO_Init+0x31c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d007      	beq.n	8000fea <HAL_GPIO_Init+0x206>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a49      	ldr	r2, [pc, #292]	@ (8001104 <HAL_GPIO_Init+0x320>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d101      	bne.n	8000fe6 <HAL_GPIO_Init+0x202>
 8000fe2:	2306      	movs	r3, #6
 8000fe4:	e00c      	b.n	8001000 <HAL_GPIO_Init+0x21c>
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	e00a      	b.n	8001000 <HAL_GPIO_Init+0x21c>
 8000fea:	2305      	movs	r3, #5
 8000fec:	e008      	b.n	8001000 <HAL_GPIO_Init+0x21c>
 8000fee:	2304      	movs	r3, #4
 8000ff0:	e006      	b.n	8001000 <HAL_GPIO_Init+0x21c>
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e004      	b.n	8001000 <HAL_GPIO_Init+0x21c>
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	e002      	b.n	8001000 <HAL_GPIO_Init+0x21c>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e000      	b.n	8001000 <HAL_GPIO_Init+0x21c>
 8000ffe:	2300      	movs	r3, #0
 8001000:	69fa      	ldr	r2, [r7, #28]
 8001002:	f002 0203 	and.w	r2, r2, #3
 8001006:	0092      	lsls	r2, r2, #2
 8001008:	4093      	lsls	r3, r2
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001010:	4935      	ldr	r1, [pc, #212]	@ (80010e8 <HAL_GPIO_Init+0x304>)
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	089b      	lsrs	r3, r3, #2
 8001016:	3302      	adds	r3, #2
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800101e:	4b3a      	ldr	r3, [pc, #232]	@ (8001108 <HAL_GPIO_Init+0x324>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001042:	4a31      	ldr	r2, [pc, #196]	@ (8001108 <HAL_GPIO_Init+0x324>)
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001048:	4b2f      	ldr	r3, [pc, #188]	@ (8001108 <HAL_GPIO_Init+0x324>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800106c:	4a26      	ldr	r2, [pc, #152]	@ (8001108 <HAL_GPIO_Init+0x324>)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001072:	4b25      	ldr	r3, [pc, #148]	@ (8001108 <HAL_GPIO_Init+0x324>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001096:	4a1c      	ldr	r2, [pc, #112]	@ (8001108 <HAL_GPIO_Init+0x324>)
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800109c:	4b1a      	ldr	r3, [pc, #104]	@ (8001108 <HAL_GPIO_Init+0x324>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010c0:	4a11      	ldr	r2, [pc, #68]	@ (8001108 <HAL_GPIO_Init+0x324>)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3301      	adds	r3, #1
 80010ca:	61fb      	str	r3, [r7, #28]
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	2b0f      	cmp	r3, #15
 80010d0:	f67f ae96 	bls.w	8000e00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	3724      	adds	r7, #36	@ 0x24
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40013800 	.word	0x40013800
 80010ec:	40020000 	.word	0x40020000
 80010f0:	40020400 	.word	0x40020400
 80010f4:	40020800 	.word	0x40020800
 80010f8:	40020c00 	.word	0x40020c00
 80010fc:	40021000 	.word	0x40021000
 8001100:	40021400 	.word	0x40021400
 8001104:	40021800 	.word	0x40021800
 8001108:	40013c00 	.word	0x40013c00

0800110c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]
 8001118:	4613      	mov	r3, r2
 800111a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800111c:	787b      	ldrb	r3, [r7, #1]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001122:	887a      	ldrh	r2, [r7, #2]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001128:	e003      	b.n	8001132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800112a:	887b      	ldrh	r3, [r7, #2]
 800112c:	041a      	lsls	r2, r3, #16
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	619a      	str	r2, [r3, #24]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800113e:	b480      	push	{r7}
 8001140:	b085      	sub	sp, #20
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	460b      	mov	r3, r1
 8001148:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001150:	887a      	ldrh	r2, [r7, #2]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4013      	ands	r3, r2
 8001156:	041a      	lsls	r2, r3, #16
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	43d9      	mvns	r1, r3
 800115c:	887b      	ldrh	r3, [r7, #2]
 800115e:	400b      	ands	r3, r1
 8001160:	431a      	orrs	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	619a      	str	r2, [r3, #24]
}
 8001166:	bf00      	nop
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af02      	add	r7, sp, #8
 8001178:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d101      	bne.n	8001184 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e108      	b.n	8001396 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	d106      	bne.n	80011a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff fbc8 	bl	8000934 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2203      	movs	r2, #3
 80011a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011b2:	d102      	bne.n	80011ba <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 fd4c 	bl	8002c5c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7c1a      	ldrb	r2, [r3, #16]
 80011cc:	f88d 2000 	strb.w	r2, [sp]
 80011d0:	3304      	adds	r3, #4
 80011d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011d4:	f001 fcde 	bl	8002b94 <USB_CoreInit>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d005      	beq.n	80011ea <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2202      	movs	r2, #2
 80011e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e0d5      	b.n	8001396 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 fd44 	bl	8002c7e <USB_SetCurrentMode>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d005      	beq.n	8001208 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2202      	movs	r2, #2
 8001200:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e0c6      	b.n	8001396 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	e04a      	b.n	80012a4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800120e:	7bfa      	ldrb	r2, [r7, #15]
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	4613      	mov	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	4413      	add	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	440b      	add	r3, r1
 800121c:	3315      	adds	r3, #21
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001222:	7bfa      	ldrb	r2, [r7, #15]
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	4413      	add	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	440b      	add	r3, r1
 8001230:	3314      	adds	r3, #20
 8001232:	7bfa      	ldrb	r2, [r7, #15]
 8001234:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001236:	7bfa      	ldrb	r2, [r7, #15]
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	b298      	uxth	r0, r3
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	332e      	adds	r3, #46	@ 0x2e
 800124a:	4602      	mov	r2, r0
 800124c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800124e:	7bfa      	ldrb	r2, [r7, #15]
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	4413      	add	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	440b      	add	r3, r1
 800125c:	3318      	adds	r3, #24
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001262:	7bfa      	ldrb	r2, [r7, #15]
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	4613      	mov	r3, r2
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	4413      	add	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	440b      	add	r3, r1
 8001270:	331c      	adds	r3, #28
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	4613      	mov	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	4413      	add	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	440b      	add	r3, r1
 8001284:	3320      	adds	r3, #32
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800128a:	7bfa      	ldrb	r2, [r7, #15]
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	4613      	mov	r3, r2
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	4413      	add	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	440b      	add	r3, r1
 8001298:	3324      	adds	r3, #36	@ 0x24
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	3301      	adds	r3, #1
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	791b      	ldrb	r3, [r3, #4]
 80012a8:	7bfa      	ldrb	r2, [r7, #15]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d3af      	bcc.n	800120e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	e044      	b.n	800133e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	4413      	add	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012ca:	7bfa      	ldrb	r2, [r7, #15]
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	4413      	add	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	440b      	add	r3, r1
 80012d8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80012dc:	7bfa      	ldrb	r2, [r7, #15]
 80012de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012e0:	7bfa      	ldrb	r2, [r7, #15]
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	4613      	mov	r3, r2
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	4413      	add	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	440b      	add	r3, r1
 80012ee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	4413      	add	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	440b      	add	r3, r1
 8001304:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4413      	add	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001322:	7bfa      	ldrb	r2, [r7, #15]
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	4613      	mov	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	4413      	add	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	440b      	add	r3, r1
 8001330:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	3301      	adds	r3, #1
 800133c:	73fb      	strb	r3, [r7, #15]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	791b      	ldrb	r3, [r3, #4]
 8001342:	7bfa      	ldrb	r2, [r7, #15]
 8001344:	429a      	cmp	r2, r3
 8001346:	d3b5      	bcc.n	80012b4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6818      	ldr	r0, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	7c1a      	ldrb	r2, [r3, #16]
 8001350:	f88d 2000 	strb.w	r2, [sp]
 8001354:	3304      	adds	r3, #4
 8001356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001358:	f001 fcde 	bl	8002d18 <USB_DevInit>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d005      	beq.n	800136e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2202      	movs	r2, #2
 8001366:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e013      	b.n	8001396 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	7b1b      	ldrb	r3, [r3, #12]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d102      	bne.n	800138a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 f80a 	bl	800139e <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f001 fe99 	bl	80030c6 <USB_DevDisconnect>

  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800139e:	b480      	push	{r7}
 80013a0:	b085      	sub	sp, #20
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d0:	f043 0303 	orr.w	r3, r3, #3
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e0cc      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013fc:	4b68      	ldr	r3, [pc, #416]	@ (80015a0 <HAL_RCC_ClockConfig+0x1b8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 030f 	and.w	r3, r3, #15
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d90c      	bls.n	8001424 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800140a:	4b65      	ldr	r3, [pc, #404]	@ (80015a0 <HAL_RCC_ClockConfig+0x1b8>)
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001412:	4b63      	ldr	r3, [pc, #396]	@ (80015a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	429a      	cmp	r2, r3
 800141e:	d001      	beq.n	8001424 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e0b8      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d020      	beq.n	8001472 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800143c:	4b59      	ldr	r3, [pc, #356]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	4a58      	ldr	r2, [pc, #352]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001442:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001446:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001454:	4b53      	ldr	r3, [pc, #332]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	4a52      	ldr	r2, [pc, #328]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800145a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800145e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001460:	4b50      	ldr	r3, [pc, #320]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	494d      	ldr	r1, [pc, #308]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800146e:	4313      	orrs	r3, r2
 8001470:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d044      	beq.n	8001508 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d107      	bne.n	8001496 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001486:	4b47      	ldr	r3, [pc, #284]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d119      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e07f      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d003      	beq.n	80014a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	d107      	bne.n	80014b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a6:	4b3f      	ldr	r3, [pc, #252]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d109      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e06f      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b6:	4b3b      	ldr	r3, [pc, #236]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e067      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014c6:	4b37      	ldr	r3, [pc, #220]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f023 0203 	bic.w	r2, r3, #3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	4934      	ldr	r1, [pc, #208]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014d8:	f7ff fb6e 	bl	8000bb8 <HAL_GetTick>
 80014dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014de:	e00a      	b.n	80014f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e0:	f7ff fb6a 	bl	8000bb8 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e04f      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f6:	4b2b      	ldr	r3, [pc, #172]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 020c 	and.w	r2, r3, #12
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	429a      	cmp	r2, r3
 8001506:	d1eb      	bne.n	80014e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001508:	4b25      	ldr	r3, [pc, #148]	@ (80015a0 <HAL_RCC_ClockConfig+0x1b8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 030f 	and.w	r3, r3, #15
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	429a      	cmp	r2, r3
 8001514:	d20c      	bcs.n	8001530 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001516:	4b22      	ldr	r3, [pc, #136]	@ (80015a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800151e:	4b20      	ldr	r3, [pc, #128]	@ (80015a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	429a      	cmp	r2, r3
 800152a:	d001      	beq.n	8001530 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e032      	b.n	8001596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b00      	cmp	r3, #0
 800153a:	d008      	beq.n	800154e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800153c:	4b19      	ldr	r3, [pc, #100]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	4916      	ldr	r1, [pc, #88]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	4313      	orrs	r3, r2
 800154c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	d009      	beq.n	800156e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800155a:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	490e      	ldr	r1, [pc, #56]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	4313      	orrs	r3, r2
 800156c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800156e:	f000 fb7f 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8001572:	4602      	mov	r2, r0
 8001574:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	091b      	lsrs	r3, r3, #4
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	490a      	ldr	r1, [pc, #40]	@ (80015a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001580:	5ccb      	ldrb	r3, [r1, r3]
 8001582:	fa22 f303 	lsr.w	r3, r2, r3
 8001586:	4a09      	ldr	r2, [pc, #36]	@ (80015ac <HAL_RCC_ClockConfig+0x1c4>)
 8001588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <HAL_RCC_ClockConfig+0x1c8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff face 	bl	8000b30 <HAL_InitTick>

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40023c00 	.word	0x40023c00
 80015a4:	40023800 	.word	0x40023800
 80015a8:	080031f8 	.word	0x080031f8
 80015ac:	20000000 	.word	0x20000000
 80015b0:	20000004 	.word	0x20000004

080015b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015b8:	4b03      	ldr	r3, [pc, #12]	@ (80015c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80015ba:	681b      	ldr	r3, [r3, #0]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000000 	.word	0x20000000

080015cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015d0:	f7ff fff0 	bl	80015b4 <HAL_RCC_GetHCLKFreq>
 80015d4:	4602      	mov	r2, r0
 80015d6:	4b05      	ldr	r3, [pc, #20]	@ (80015ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	0a9b      	lsrs	r3, r3, #10
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	4903      	ldr	r1, [pc, #12]	@ (80015f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015e2:	5ccb      	ldrb	r3, [r1, r3]
 80015e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40023800 	.word	0x40023800
 80015f0:	08003208 	.word	0x08003208

080015f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015f8:	f7ff ffdc 	bl	80015b4 <HAL_RCC_GetHCLKFreq>
 80015fc:	4602      	mov	r2, r0
 80015fe:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	0b5b      	lsrs	r3, r3, #13
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	4903      	ldr	r1, [pc, #12]	@ (8001618 <HAL_RCC_GetPCLK2Freq+0x24>)
 800160a:	5ccb      	ldrb	r3, [r1, r3]
 800160c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001610:	4618      	mov	r0, r3
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40023800 	.word	0x40023800
 8001618:	08003208 	.word	0x08003208

0800161c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08c      	sub	sp, #48	@ 0x30
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b00      	cmp	r3, #0
 8001652:	d010      	beq.n	8001676 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001654:	4b6f      	ldr	r3, [pc, #444]	@ (8001814 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001656:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800165a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001662:	496c      	ldr	r1, [pc, #432]	@ (8001814 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001664:	4313      	orrs	r3, r2
 8001666:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001672:	2301      	movs	r3, #1
 8001674:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d010      	beq.n	80016a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001682:	4b64      	ldr	r3, [pc, #400]	@ (8001814 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001684:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001688:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001690:	4960      	ldr	r1, [pc, #384]	@ (8001814 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001692:	4313      	orrs	r3, r2
 8001694:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80016a0:	2301      	movs	r3, #1
 80016a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d017      	beq.n	80016e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80016b0:	4b58      	ldr	r3, [pc, #352]	@ (8001814 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	4955      	ldr	r1, [pc, #340]	@ (8001814 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80016ce:	d101      	bne.n	80016d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80016d0:	2301      	movs	r3, #1
 80016d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80016dc:	2301      	movs	r3, #1
 80016de:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d017      	beq.n	800171c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80016ec:	4b49      	ldr	r3, [pc, #292]	@ (8001814 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016fa:	4946      	ldr	r1, [pc, #280]	@ (8001814 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001706:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800170a:	d101      	bne.n	8001710 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800170c:	2301      	movs	r3, #1
 800170e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001718:	2301      	movs	r3, #1
 800171a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0320 	and.w	r3, r3, #32
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 808a 	beq.w	800183e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	4b39      	ldr	r3, [pc, #228]	@ (8001814 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	4a38      	ldr	r2, [pc, #224]	@ (8001814 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001738:	6413      	str	r3, [r2, #64]	@ 0x40
 800173a:	4b36      	ldr	r3, [pc, #216]	@ (8001814 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001746:	4b34      	ldr	r3, [pc, #208]	@ (8001818 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a33      	ldr	r2, [pc, #204]	@ (8001818 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800174c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001750:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001752:	f7ff fa31 	bl	8000bb8 <HAL_GetTick>
 8001756:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001758:	e008      	b.n	800176c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800175a:	f7ff fa2d 	bl	8000bb8 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e278      	b.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800176c:	4b2a      	ldr	r3, [pc, #168]	@ (8001818 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0f0      	beq.n	800175a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001778:	4b26      	ldr	r3, [pc, #152]	@ (8001814 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800177a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800177c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001780:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001782:	6a3b      	ldr	r3, [r7, #32]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d02f      	beq.n	80017e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001790:	6a3a      	ldr	r2, [r7, #32]
 8001792:	429a      	cmp	r2, r3
 8001794:	d028      	beq.n	80017e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001796:	4b1f      	ldr	r3, [pc, #124]	@ (8001814 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800179a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800179e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80017a0:	4b1e      	ldr	r3, [pc, #120]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80017a6:	4b1d      	ldr	r3, [pc, #116]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80017ac:	4a19      	ldr	r2, [pc, #100]	@ (8001814 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80017b2:	4b18      	ldr	r3, [pc, #96]	@ (8001814 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d114      	bne.n	80017e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80017be:	f7ff f9fb 	bl	8000bb8 <HAL_GetTick>
 80017c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c4:	e00a      	b.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c6:	f7ff f9f7 	bl	8000bb8 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d901      	bls.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e240      	b.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001814 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0ee      	beq.n	80017c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80017f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80017f4:	d114      	bne.n	8001820 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80017f6:	4b07      	ldr	r3, [pc, #28]	@ (8001814 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001806:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800180a:	4902      	ldr	r1, [pc, #8]	@ (8001814 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800180c:	4313      	orrs	r3, r2
 800180e:	608b      	str	r3, [r1, #8]
 8001810:	e00c      	b.n	800182c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	40007000 	.word	0x40007000
 800181c:	42470e40 	.word	0x42470e40
 8001820:	4b4a      	ldr	r3, [pc, #296]	@ (800194c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	4a49      	ldr	r2, [pc, #292]	@ (800194c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001826:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800182a:	6093      	str	r3, [r2, #8]
 800182c:	4b47      	ldr	r3, [pc, #284]	@ (800194c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800182e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001838:	4944      	ldr	r1, [pc, #272]	@ (800194c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800183a:	4313      	orrs	r3, r2
 800183c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0310 	and.w	r3, r3, #16
 8001846:	2b00      	cmp	r3, #0
 8001848:	d004      	beq.n	8001854 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8001850:	4b3f      	ldr	r3, [pc, #252]	@ (8001950 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001852:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00a      	beq.n	8001876 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001860:	4b3a      	ldr	r3, [pc, #232]	@ (800194c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001862:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001866:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186e:	4937      	ldr	r1, [pc, #220]	@ (800194c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001870:	4313      	orrs	r3, r2
 8001872:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00a      	beq.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001882:	4b32      	ldr	r3, [pc, #200]	@ (800194c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001884:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001888:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001890:	492e      	ldr	r1, [pc, #184]	@ (800194c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001892:	4313      	orrs	r3, r2
 8001894:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d011      	beq.n	80018c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80018a4:	4b29      	ldr	r3, [pc, #164]	@ (800194c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018aa:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018b2:	4926      	ldr	r1, [pc, #152]	@ (800194c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80018c2:	d101      	bne.n	80018c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80018c4:	2301      	movs	r3, #1
 80018c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00a      	beq.n	80018ea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80018d4:	4b1d      	ldr	r3, [pc, #116]	@ (800194c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018da:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e2:	491a      	ldr	r1, [pc, #104]	@ (800194c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d011      	beq.n	800191a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80018f6:	4b15      	ldr	r3, [pc, #84]	@ (800194c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018fc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001904:	4911      	ldr	r1, [pc, #68]	@ (800194c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001906:	4313      	orrs	r3, r2
 8001908:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001910:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001914:	d101      	bne.n	800191a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001916:	2301      	movs	r3, #1
 8001918:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800191a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800191c:	2b01      	cmp	r3, #1
 800191e:	d005      	beq.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001928:	f040 80ff 	bne.w	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800192c:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001932:	f7ff f941 	bl	8000bb8 <HAL_GetTick>
 8001936:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001938:	e00e      	b.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800193a:	f7ff f93d 	bl	8000bb8 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d907      	bls.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e188      	b.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800194c:	40023800 	.word	0x40023800
 8001950:	424711e0 	.word	0x424711e0
 8001954:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001958:	4b7e      	ldr	r3, [pc, #504]	@ (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1ea      	bne.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001974:	2b00      	cmp	r3, #0
 8001976:	d009      	beq.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001980:	2b00      	cmp	r3, #0
 8001982:	d028      	beq.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001988:	2b00      	cmp	r3, #0
 800198a:	d124      	bne.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800198c:	4b71      	ldr	r3, [pc, #452]	@ (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800198e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001992:	0c1b      	lsrs	r3, r3, #16
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	3301      	adds	r3, #1
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800199e:	4b6d      	ldr	r3, [pc, #436]	@ (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80019a4:	0e1b      	lsrs	r3, r3, #24
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	019b      	lsls	r3, r3, #6
 80019b6:	431a      	orrs	r2, r3
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	085b      	lsrs	r3, r3, #1
 80019bc:	3b01      	subs	r3, #1
 80019be:	041b      	lsls	r3, r3, #16
 80019c0:	431a      	orrs	r2, r3
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	061b      	lsls	r3, r3, #24
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	071b      	lsls	r3, r3, #28
 80019ce:	4961      	ldr	r1, [pc, #388]	@ (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d004      	beq.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80019ea:	d00a      	beq.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d035      	beq.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a00:	d130      	bne.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001a02:	4b54      	ldr	r3, [pc, #336]	@ (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a08:	0c1b      	lsrs	r3, r3, #16
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	3301      	adds	r3, #1
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001a14:	4b4f      	ldr	r3, [pc, #316]	@ (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a1a:	0f1b      	lsrs	r3, r3, #28
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	019b      	lsls	r3, r3, #6
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	3b01      	subs	r3, #1
 8001a34:	041b      	lsls	r3, r3, #16
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	061b      	lsls	r3, r3, #24
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	071b      	lsls	r3, r3, #28
 8001a44:	4943      	ldr	r1, [pc, #268]	@ (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001a4c:	4b41      	ldr	r3, [pc, #260]	@ (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a52:	f023 021f 	bic.w	r2, r3, #31
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	493d      	ldr	r1, [pc, #244]	@ (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d029      	beq.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a78:	d124      	bne.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001a7a:	4b36      	ldr	r3, [pc, #216]	@ (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a80:	0c1b      	lsrs	r3, r3, #16
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	3301      	adds	r3, #1
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001a8c:	4b31      	ldr	r3, [pc, #196]	@ (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a92:	0f1b      	lsrs	r3, r3, #28
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	019b      	lsls	r3, r3, #6
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	085b      	lsrs	r3, r3, #1
 8001aac:	3b01      	subs	r3, #1
 8001aae:	041b      	lsls	r3, r3, #16
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	061b      	lsls	r3, r3, #24
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	071b      	lsls	r3, r3, #28
 8001abc:	4925      	ldr	r1, [pc, #148]	@ (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d016      	beq.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	019b      	lsls	r3, r3, #6
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	085b      	lsrs	r3, r3, #1
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	041b      	lsls	r3, r3, #16
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	061b      	lsls	r3, r3, #24
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	071b      	lsls	r3, r3, #28
 8001af6:	4917      	ldr	r1, [pc, #92]	@ (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001afe:	4b16      	ldr	r3, [pc, #88]	@ (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b04:	f7ff f858 	bl	8000bb8 <HAL_GetTick>
 8001b08:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001b0c:	f7ff f854 	bl	8000bb8 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e09f      	b.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8001b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	f040 8095 	bne.w	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001b32:	4b0a      	ldr	r3, [pc, #40]	@ (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b38:	f7ff f83e 	bl	8000bb8 <HAL_GetTick>
 8001b3c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001b3e:	e00f      	b.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001b40:	f7ff f83a 	bl	8000bb8 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d908      	bls.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e085      	b.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800
 8001b58:	42470068 	.word	0x42470068
 8001b5c:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001b60:	4b41      	ldr	r3, [pc, #260]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b6c:	d0e8      	beq.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d009      	beq.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d02b      	beq.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d127      	bne.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001b96:	4b34      	ldr	r3, [pc, #208]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b9c:	0c1b      	lsrs	r3, r3, #16
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699a      	ldr	r2, [r3, #24]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	019b      	lsls	r3, r3, #6
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	085b      	lsrs	r3, r3, #1
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	041b      	lsls	r3, r3, #16
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc2:	061b      	lsls	r3, r3, #24
 8001bc4:	4928      	ldr	r1, [pc, #160]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001bcc:	4b26      	ldr	r3, [pc, #152]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bd2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	4922      	ldr	r1, [pc, #136]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d01d      	beq.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001bfa:	d118      	bne.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c02:	0e1b      	lsrs	r3, r3, #24
 8001c04:	f003 030f 	and.w	r3, r3, #15
 8001c08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699a      	ldr	r2, [r3, #24]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	019b      	lsls	r3, r3, #6
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	085b      	lsrs	r3, r3, #1
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	041b      	lsls	r3, r3, #16
 8001c20:	431a      	orrs	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	061b      	lsls	r3, r3, #24
 8001c26:	4910      	ldr	r1, [pc, #64]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c34:	f7fe ffc0 	bl	8000bb8 <HAL_GetTick>
 8001c38:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001c3c:	f7fe ffbc 	bl	8000bb8 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e007      	b.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001c4e:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c5a:	d1ef      	bne.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3730      	adds	r7, #48	@ 0x30
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	42470070 	.word	0x42470070

08001c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c74:	b0ae      	sub	sp, #184	@ 0xb8
 8001c76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c96:	4bcb      	ldr	r3, [pc, #812]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b0c      	cmp	r3, #12
 8001ca0:	f200 8206 	bhi.w	80020b0 <HAL_RCC_GetSysClockFreq+0x440>
 8001ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8001cac <HAL_RCC_GetSysClockFreq+0x3c>)
 8001ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001caa:	bf00      	nop
 8001cac:	08001ce1 	.word	0x08001ce1
 8001cb0:	080020b1 	.word	0x080020b1
 8001cb4:	080020b1 	.word	0x080020b1
 8001cb8:	080020b1 	.word	0x080020b1
 8001cbc:	08001ce9 	.word	0x08001ce9
 8001cc0:	080020b1 	.word	0x080020b1
 8001cc4:	080020b1 	.word	0x080020b1
 8001cc8:	080020b1 	.word	0x080020b1
 8001ccc:	08001cf1 	.word	0x08001cf1
 8001cd0:	080020b1 	.word	0x080020b1
 8001cd4:	080020b1 	.word	0x080020b1
 8001cd8:	080020b1 	.word	0x080020b1
 8001cdc:	08001ee1 	.word	0x08001ee1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ce0:	4bb9      	ldr	r3, [pc, #740]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ce2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ce6:	e1e7      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ce8:	4bb8      	ldr	r3, [pc, #736]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x35c>)
 8001cea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001cee:	e1e3      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cf0:	4bb4      	ldr	r3, [pc, #720]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cf8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cfc:	4bb1      	ldr	r3, [pc, #708]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d071      	beq.n	8001dec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d08:	4bae      	ldr	r3, [pc, #696]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	099b      	lsrs	r3, r3, #6
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001d14:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001d18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001d2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001d2e:	4622      	mov	r2, r4
 8001d30:	462b      	mov	r3, r5
 8001d32:	f04f 0000 	mov.w	r0, #0
 8001d36:	f04f 0100 	mov.w	r1, #0
 8001d3a:	0159      	lsls	r1, r3, #5
 8001d3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d40:	0150      	lsls	r0, r2, #5
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4621      	mov	r1, r4
 8001d48:	1a51      	subs	r1, r2, r1
 8001d4a:	6439      	str	r1, [r7, #64]	@ 0x40
 8001d4c:	4629      	mov	r1, r5
 8001d4e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d52:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001d60:	4649      	mov	r1, r9
 8001d62:	018b      	lsls	r3, r1, #6
 8001d64:	4641      	mov	r1, r8
 8001d66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d6a:	4641      	mov	r1, r8
 8001d6c:	018a      	lsls	r2, r1, #6
 8001d6e:	4641      	mov	r1, r8
 8001d70:	1a51      	subs	r1, r2, r1
 8001d72:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001d74:	4649      	mov	r1, r9
 8001d76:	eb63 0301 	sbc.w	r3, r3, r1
 8001d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001d88:	4649      	mov	r1, r9
 8001d8a:	00cb      	lsls	r3, r1, #3
 8001d8c:	4641      	mov	r1, r8
 8001d8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d92:	4641      	mov	r1, r8
 8001d94:	00ca      	lsls	r2, r1, #3
 8001d96:	4610      	mov	r0, r2
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4622      	mov	r2, r4
 8001d9e:	189b      	adds	r3, r3, r2
 8001da0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001da2:	462b      	mov	r3, r5
 8001da4:	460a      	mov	r2, r1
 8001da6:	eb42 0303 	adc.w	r3, r2, r3
 8001daa:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001db8:	4629      	mov	r1, r5
 8001dba:	024b      	lsls	r3, r1, #9
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dc2:	4621      	mov	r1, r4
 8001dc4:	024a      	lsls	r2, r1, #9
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001dd4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001dd8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001ddc:	f7fe fa12 	bl	8000204 <__aeabi_uldivmod>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4613      	mov	r3, r2
 8001de6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001dea:	e067      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dec:	4b75      	ldr	r3, [pc, #468]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	099b      	lsrs	r3, r3, #6
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001df8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001dfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e04:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001e06:	2300      	movs	r3, #0
 8001e08:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001e0a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001e0e:	4622      	mov	r2, r4
 8001e10:	462b      	mov	r3, r5
 8001e12:	f04f 0000 	mov.w	r0, #0
 8001e16:	f04f 0100 	mov.w	r1, #0
 8001e1a:	0159      	lsls	r1, r3, #5
 8001e1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e20:	0150      	lsls	r0, r2, #5
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4621      	mov	r1, r4
 8001e28:	1a51      	subs	r1, r2, r1
 8001e2a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001e2c:	4629      	mov	r1, r5
 8001e2e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	f04f 0300 	mov.w	r3, #0
 8001e3c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001e40:	4649      	mov	r1, r9
 8001e42:	018b      	lsls	r3, r1, #6
 8001e44:	4641      	mov	r1, r8
 8001e46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e4a:	4641      	mov	r1, r8
 8001e4c:	018a      	lsls	r2, r1, #6
 8001e4e:	4641      	mov	r1, r8
 8001e50:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e54:	4649      	mov	r1, r9
 8001e56:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e66:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e6e:	4692      	mov	sl, r2
 8001e70:	469b      	mov	fp, r3
 8001e72:	4623      	mov	r3, r4
 8001e74:	eb1a 0303 	adds.w	r3, sl, r3
 8001e78:	623b      	str	r3, [r7, #32]
 8001e7a:	462b      	mov	r3, r5
 8001e7c:	eb4b 0303 	adc.w	r3, fp, r3
 8001e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001e8e:	4629      	mov	r1, r5
 8001e90:	028b      	lsls	r3, r1, #10
 8001e92:	4621      	mov	r1, r4
 8001e94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e98:	4621      	mov	r1, r4
 8001e9a:	028a      	lsls	r2, r1, #10
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	673b      	str	r3, [r7, #112]	@ 0x70
 8001ea8:	677a      	str	r2, [r7, #116]	@ 0x74
 8001eaa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001eae:	f7fe f9a9 	bl	8000204 <__aeabi_uldivmod>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ebc:	4b41      	ldr	r3, [pc, #260]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	0c1b      	lsrs	r3, r3, #16
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001ece:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001ed2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ede:	e0eb      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ee0:	4b38      	ldr	r3, [pc, #224]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eec:	4b35      	ldr	r3, [pc, #212]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d06b      	beq.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef8:	4b32      	ldr	r3, [pc, #200]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	099b      	lsrs	r3, r3, #6
 8001efe:	2200      	movs	r2, #0
 8001f00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001f02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001f04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f10:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001f14:	4622      	mov	r2, r4
 8001f16:	462b      	mov	r3, r5
 8001f18:	f04f 0000 	mov.w	r0, #0
 8001f1c:	f04f 0100 	mov.w	r1, #0
 8001f20:	0159      	lsls	r1, r3, #5
 8001f22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f26:	0150      	lsls	r0, r2, #5
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4621      	mov	r1, r4
 8001f2e:	1a51      	subs	r1, r2, r1
 8001f30:	61b9      	str	r1, [r7, #24]
 8001f32:	4629      	mov	r1, r5
 8001f34:	eb63 0301 	sbc.w	r3, r3, r1
 8001f38:	61fb      	str	r3, [r7, #28]
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	f04f 0300 	mov.w	r3, #0
 8001f42:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001f46:	4659      	mov	r1, fp
 8001f48:	018b      	lsls	r3, r1, #6
 8001f4a:	4651      	mov	r1, sl
 8001f4c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f50:	4651      	mov	r1, sl
 8001f52:	018a      	lsls	r2, r1, #6
 8001f54:	4651      	mov	r1, sl
 8001f56:	ebb2 0801 	subs.w	r8, r2, r1
 8001f5a:	4659      	mov	r1, fp
 8001f5c:	eb63 0901 	sbc.w	r9, r3, r1
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f6c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f70:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f74:	4690      	mov	r8, r2
 8001f76:	4699      	mov	r9, r3
 8001f78:	4623      	mov	r3, r4
 8001f7a:	eb18 0303 	adds.w	r3, r8, r3
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	462b      	mov	r3, r5
 8001f82:	eb49 0303 	adc.w	r3, r9, r3
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001f94:	4629      	mov	r1, r5
 8001f96:	024b      	lsls	r3, r1, #9
 8001f98:	4621      	mov	r1, r4
 8001f9a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f9e:	4621      	mov	r1, r4
 8001fa0:	024a      	lsls	r2, r1, #9
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001faa:	2200      	movs	r2, #0
 8001fac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001fae:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001fb0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001fb4:	f7fe f926 	bl	8000204 <__aeabi_uldivmod>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001fc2:	e065      	b.n	8002090 <HAL_RCC_GetSysClockFreq+0x420>
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	00f42400 	.word	0x00f42400
 8001fcc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fd0:	4b3d      	ldr	r3, [pc, #244]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	099b      	lsrs	r3, r3, #6
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	4611      	mov	r1, r2
 8001fdc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001fe0:	653b      	str	r3, [r7, #80]	@ 0x50
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	657b      	str	r3, [r7, #84]	@ 0x54
 8001fe6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001fea:	4642      	mov	r2, r8
 8001fec:	464b      	mov	r3, r9
 8001fee:	f04f 0000 	mov.w	r0, #0
 8001ff2:	f04f 0100 	mov.w	r1, #0
 8001ff6:	0159      	lsls	r1, r3, #5
 8001ff8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ffc:	0150      	lsls	r0, r2, #5
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4641      	mov	r1, r8
 8002004:	1a51      	subs	r1, r2, r1
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	4649      	mov	r1, r9
 800200a:	eb63 0301 	sbc.w	r3, r3, r1
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800201c:	4659      	mov	r1, fp
 800201e:	018b      	lsls	r3, r1, #6
 8002020:	4651      	mov	r1, sl
 8002022:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002026:	4651      	mov	r1, sl
 8002028:	018a      	lsls	r2, r1, #6
 800202a:	4651      	mov	r1, sl
 800202c:	1a54      	subs	r4, r2, r1
 800202e:	4659      	mov	r1, fp
 8002030:	eb63 0501 	sbc.w	r5, r3, r1
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	f04f 0300 	mov.w	r3, #0
 800203c:	00eb      	lsls	r3, r5, #3
 800203e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002042:	00e2      	lsls	r2, r4, #3
 8002044:	4614      	mov	r4, r2
 8002046:	461d      	mov	r5, r3
 8002048:	4643      	mov	r3, r8
 800204a:	18e3      	adds	r3, r4, r3
 800204c:	603b      	str	r3, [r7, #0]
 800204e:	464b      	mov	r3, r9
 8002050:	eb45 0303 	adc.w	r3, r5, r3
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	f04f 0300 	mov.w	r3, #0
 800205e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002062:	4629      	mov	r1, r5
 8002064:	028b      	lsls	r3, r1, #10
 8002066:	4621      	mov	r1, r4
 8002068:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800206c:	4621      	mov	r1, r4
 800206e:	028a      	lsls	r2, r1, #10
 8002070:	4610      	mov	r0, r2
 8002072:	4619      	mov	r1, r3
 8002074:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002078:	2200      	movs	r2, #0
 800207a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800207c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800207e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002082:	f7fe f8bf 	bl	8000204 <__aeabi_uldivmod>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4613      	mov	r3, r2
 800208c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002090:	4b0d      	ldr	r3, [pc, #52]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	0f1b      	lsrs	r3, r3, #28
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800209e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80020a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80020a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80020ae:	e003      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020b0:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x45c>)
 80020b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80020b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	37b8      	adds	r7, #184	@ 0xb8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800
 80020cc:	00f42400 	.word	0x00f42400

080020d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e28d      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 8083 	beq.w	80021f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80020f0:	4b94      	ldr	r3, [pc, #592]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 030c 	and.w	r3, r3, #12
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d019      	beq.n	8002130 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80020fc:	4b91      	ldr	r3, [pc, #580]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 030c 	and.w	r3, r3, #12
        || \
 8002104:	2b08      	cmp	r3, #8
 8002106:	d106      	bne.n	8002116 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002108:	4b8e      	ldr	r3, [pc, #568]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002110:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002114:	d00c      	beq.n	8002130 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002116:	4b8b      	ldr	r3, [pc, #556]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800211e:	2b0c      	cmp	r3, #12
 8002120:	d112      	bne.n	8002148 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002122:	4b88      	ldr	r3, [pc, #544]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800212a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800212e:	d10b      	bne.n	8002148 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002130:	4b84      	ldr	r3, [pc, #528]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d05b      	beq.n	80021f4 <HAL_RCC_OscConfig+0x124>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d157      	bne.n	80021f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e25a      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002150:	d106      	bne.n	8002160 <HAL_RCC_OscConfig+0x90>
 8002152:	4b7c      	ldr	r3, [pc, #496]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a7b      	ldr	r2, [pc, #492]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 8002158:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	e01d      	b.n	800219c <HAL_RCC_OscConfig+0xcc>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0xb4>
 800216a:	4b76      	ldr	r3, [pc, #472]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a75      	ldr	r2, [pc, #468]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 8002170:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	4b73      	ldr	r3, [pc, #460]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a72      	ldr	r2, [pc, #456]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 800217c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	e00b      	b.n	800219c <HAL_RCC_OscConfig+0xcc>
 8002184:	4b6f      	ldr	r3, [pc, #444]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a6e      	ldr	r2, [pc, #440]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 800218a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	4b6c      	ldr	r3, [pc, #432]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a6b      	ldr	r2, [pc, #428]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 8002196:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800219a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d013      	beq.n	80021cc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a4:	f7fe fd08 	bl	8000bb8 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ac:	f7fe fd04 	bl	8000bb8 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b64      	cmp	r3, #100	@ 0x64
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e21f      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021be:	4b61      	ldr	r3, [pc, #388]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCC_OscConfig+0xdc>
 80021ca:	e014      	b.n	80021f6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021cc:	f7fe fcf4 	bl	8000bb8 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d4:	f7fe fcf0 	bl	8000bb8 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b64      	cmp	r3, #100	@ 0x64
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e20b      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e6:	4b57      	ldr	r3, [pc, #348]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x104>
 80021f2:	e000      	b.n	80021f6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d06f      	beq.n	80022e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002202:	4b50      	ldr	r3, [pc, #320]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b00      	cmp	r3, #0
 800220c:	d017      	beq.n	800223e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800220e:	4b4d      	ldr	r3, [pc, #308]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 030c 	and.w	r3, r3, #12
        || \
 8002216:	2b08      	cmp	r3, #8
 8002218:	d105      	bne.n	8002226 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800221a:	4b4a      	ldr	r3, [pc, #296]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00b      	beq.n	800223e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002226:	4b47      	ldr	r3, [pc, #284]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800222e:	2b0c      	cmp	r3, #12
 8002230:	d11c      	bne.n	800226c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002232:	4b44      	ldr	r3, [pc, #272]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d116      	bne.n	800226c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223e:	4b41      	ldr	r3, [pc, #260]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <HAL_RCC_OscConfig+0x186>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d001      	beq.n	8002256 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e1d3      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002256:	4b3b      	ldr	r3, [pc, #236]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4937      	ldr	r1, [pc, #220]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226a:	e03a      	b.n	80022e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d020      	beq.n	80022b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002274:	4b34      	ldr	r3, [pc, #208]	@ (8002348 <HAL_RCC_OscConfig+0x278>)
 8002276:	2201      	movs	r2, #1
 8002278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227a:	f7fe fc9d 	bl	8000bb8 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002282:	f7fe fc99 	bl	8000bb8 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e1b4      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002294:	4b2b      	ldr	r3, [pc, #172]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0f0      	beq.n	8002282 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a0:	4b28      	ldr	r3, [pc, #160]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4925      	ldr	r1, [pc, #148]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	600b      	str	r3, [r1, #0]
 80022b4:	e015      	b.n	80022e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b6:	4b24      	ldr	r3, [pc, #144]	@ (8002348 <HAL_RCC_OscConfig+0x278>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7fe fc7c 	bl	8000bb8 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c4:	f7fe fc78 	bl	8000bb8 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e193      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d036      	beq.n	800235c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d016      	beq.n	8002324 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f6:	4b15      	ldr	r3, [pc, #84]	@ (800234c <HAL_RCC_OscConfig+0x27c>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fc:	f7fe fc5c 	bl	8000bb8 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002304:	f7fe fc58 	bl	8000bb8 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e173      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002316:	4b0b      	ldr	r3, [pc, #44]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 8002318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0x234>
 8002322:	e01b      	b.n	800235c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002324:	4b09      	ldr	r3, [pc, #36]	@ (800234c <HAL_RCC_OscConfig+0x27c>)
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232a:	f7fe fc45 	bl	8000bb8 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002330:	e00e      	b.n	8002350 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002332:	f7fe fc41 	bl	8000bb8 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d907      	bls.n	8002350 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e15c      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
 8002344:	40023800 	.word	0x40023800
 8002348:	42470000 	.word	0x42470000
 800234c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002350:	4b8a      	ldr	r3, [pc, #552]	@ (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002352:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1ea      	bne.n	8002332 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 8097 	beq.w	8002498 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800236a:	2300      	movs	r3, #0
 800236c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236e:	4b83      	ldr	r3, [pc, #524]	@ (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10f      	bne.n	800239a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	4b7f      	ldr	r3, [pc, #508]	@ (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	4a7e      	ldr	r2, [pc, #504]	@ (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002388:	6413      	str	r3, [r2, #64]	@ 0x40
 800238a:	4b7c      	ldr	r3, [pc, #496]	@ (800257c <HAL_RCC_OscConfig+0x4ac>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002396:	2301      	movs	r3, #1
 8002398:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239a:	4b79      	ldr	r3, [pc, #484]	@ (8002580 <HAL_RCC_OscConfig+0x4b0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d118      	bne.n	80023d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a6:	4b76      	ldr	r3, [pc, #472]	@ (8002580 <HAL_RCC_OscConfig+0x4b0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a75      	ldr	r2, [pc, #468]	@ (8002580 <HAL_RCC_OscConfig+0x4b0>)
 80023ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b2:	f7fe fc01 	bl	8000bb8 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ba:	f7fe fbfd 	bl	8000bb8 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e118      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023cc:	4b6c      	ldr	r3, [pc, #432]	@ (8002580 <HAL_RCC_OscConfig+0x4b0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d106      	bne.n	80023ee <HAL_RCC_OscConfig+0x31e>
 80023e0:	4b66      	ldr	r3, [pc, #408]	@ (800257c <HAL_RCC_OscConfig+0x4ac>)
 80023e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e4:	4a65      	ldr	r2, [pc, #404]	@ (800257c <HAL_RCC_OscConfig+0x4ac>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ec:	e01c      	b.n	8002428 <HAL_RCC_OscConfig+0x358>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b05      	cmp	r3, #5
 80023f4:	d10c      	bne.n	8002410 <HAL_RCC_OscConfig+0x340>
 80023f6:	4b61      	ldr	r3, [pc, #388]	@ (800257c <HAL_RCC_OscConfig+0x4ac>)
 80023f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023fa:	4a60      	ldr	r2, [pc, #384]	@ (800257c <HAL_RCC_OscConfig+0x4ac>)
 80023fc:	f043 0304 	orr.w	r3, r3, #4
 8002400:	6713      	str	r3, [r2, #112]	@ 0x70
 8002402:	4b5e      	ldr	r3, [pc, #376]	@ (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002406:	4a5d      	ldr	r2, [pc, #372]	@ (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6713      	str	r3, [r2, #112]	@ 0x70
 800240e:	e00b      	b.n	8002428 <HAL_RCC_OscConfig+0x358>
 8002410:	4b5a      	ldr	r3, [pc, #360]	@ (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002414:	4a59      	ldr	r2, [pc, #356]	@ (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002416:	f023 0301 	bic.w	r3, r3, #1
 800241a:	6713      	str	r3, [r2, #112]	@ 0x70
 800241c:	4b57      	ldr	r3, [pc, #348]	@ (800257c <HAL_RCC_OscConfig+0x4ac>)
 800241e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002420:	4a56      	ldr	r2, [pc, #344]	@ (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002422:	f023 0304 	bic.w	r3, r3, #4
 8002426:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d015      	beq.n	800245c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002430:	f7fe fbc2 	bl	8000bb8 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002436:	e00a      	b.n	800244e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002438:	f7fe fbbe 	bl	8000bb8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002446:	4293      	cmp	r3, r2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e0d7      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244e:	4b4b      	ldr	r3, [pc, #300]	@ (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0ee      	beq.n	8002438 <HAL_RCC_OscConfig+0x368>
 800245a:	e014      	b.n	8002486 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245c:	f7fe fbac 	bl	8000bb8 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002462:	e00a      	b.n	800247a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002464:	f7fe fba8 	bl	8000bb8 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e0c1      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800247a:	4b40      	ldr	r3, [pc, #256]	@ (800257c <HAL_RCC_OscConfig+0x4ac>)
 800247c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1ee      	bne.n	8002464 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002486:	7dfb      	ldrb	r3, [r7, #23]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d105      	bne.n	8002498 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248c:	4b3b      	ldr	r3, [pc, #236]	@ (800257c <HAL_RCC_OscConfig+0x4ac>)
 800248e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002490:	4a3a      	ldr	r2, [pc, #232]	@ (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002492:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002496:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 80ad 	beq.w	80025fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024a2:	4b36      	ldr	r3, [pc, #216]	@ (800257c <HAL_RCC_OscConfig+0x4ac>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d060      	beq.n	8002570 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d145      	bne.n	8002542 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b6:	4b33      	ldr	r3, [pc, #204]	@ (8002584 <HAL_RCC_OscConfig+0x4b4>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024bc:	f7fe fb7c 	bl	8000bb8 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c4:	f7fe fb78 	bl	8000bb8 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e093      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d6:	4b29      	ldr	r3, [pc, #164]	@ (800257c <HAL_RCC_OscConfig+0x4ac>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69da      	ldr	r2, [r3, #28]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f0:	019b      	lsls	r3, r3, #6
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f8:	085b      	lsrs	r3, r3, #1
 80024fa:	3b01      	subs	r3, #1
 80024fc:	041b      	lsls	r3, r3, #16
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002504:	061b      	lsls	r3, r3, #24
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250c:	071b      	lsls	r3, r3, #28
 800250e:	491b      	ldr	r1, [pc, #108]	@ (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002514:	4b1b      	ldr	r3, [pc, #108]	@ (8002584 <HAL_RCC_OscConfig+0x4b4>)
 8002516:	2201      	movs	r2, #1
 8002518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251a:	f7fe fb4d 	bl	8000bb8 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002522:	f7fe fb49 	bl	8000bb8 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e064      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002534:	4b11      	ldr	r3, [pc, #68]	@ (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f0      	beq.n	8002522 <HAL_RCC_OscConfig+0x452>
 8002540:	e05c      	b.n	80025fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002542:	4b10      	ldr	r3, [pc, #64]	@ (8002584 <HAL_RCC_OscConfig+0x4b4>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002548:	f7fe fb36 	bl	8000bb8 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002550:	f7fe fb32 	bl	8000bb8 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e04d      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002562:	4b06      	ldr	r3, [pc, #24]	@ (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x480>
 800256e:	e045      	b.n	80025fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d107      	bne.n	8002588 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e040      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
 800257c:	40023800 	.word	0x40023800
 8002580:	40007000 	.word	0x40007000
 8002584:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002588:	4b1f      	ldr	r3, [pc, #124]	@ (8002608 <HAL_RCC_OscConfig+0x538>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d030      	beq.n	80025f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d129      	bne.n	80025f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d122      	bne.n	80025f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025b8:	4013      	ands	r3, r2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d119      	bne.n	80025f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ce:	085b      	lsrs	r3, r3, #1
 80025d0:	3b01      	subs	r3, #1
 80025d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d10f      	bne.n	80025f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d107      	bne.n	80025f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d001      	beq.n	80025fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40023800 	.word	0x40023800

0800260c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e042      	b.n	80026a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7fe f936 	bl	80008a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2224      	movs	r2, #36	@ 0x24
 800263c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800264e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f82b 	bl	80026ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002664:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695a      	ldr	r2, [r3, #20]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002674:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002684:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026b0:	b0c0      	sub	sp, #256	@ 0x100
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80026c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c8:	68d9      	ldr	r1, [r3, #12]
 80026ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	ea40 0301 	orr.w	r3, r0, r1
 80026d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	431a      	orrs	r2, r3
 80026e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	431a      	orrs	r2, r3
 80026ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002704:	f021 010c 	bic.w	r1, r1, #12
 8002708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002712:	430b      	orrs	r3, r1
 8002714:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002726:	6999      	ldr	r1, [r3, #24]
 8002728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	ea40 0301 	orr.w	r3, r0, r1
 8002732:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	4b8f      	ldr	r3, [pc, #572]	@ (8002978 <UART_SetConfig+0x2cc>)
 800273c:	429a      	cmp	r2, r3
 800273e:	d005      	beq.n	800274c <UART_SetConfig+0xa0>
 8002740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	4b8d      	ldr	r3, [pc, #564]	@ (800297c <UART_SetConfig+0x2d0>)
 8002748:	429a      	cmp	r2, r3
 800274a:	d104      	bne.n	8002756 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800274c:	f7fe ff52 	bl	80015f4 <HAL_RCC_GetPCLK2Freq>
 8002750:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002754:	e003      	b.n	800275e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002756:	f7fe ff39 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 800275a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800275e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002768:	f040 810c 	bne.w	8002984 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800276c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002770:	2200      	movs	r2, #0
 8002772:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002776:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800277a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800277e:	4622      	mov	r2, r4
 8002780:	462b      	mov	r3, r5
 8002782:	1891      	adds	r1, r2, r2
 8002784:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002786:	415b      	adcs	r3, r3
 8002788:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800278a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800278e:	4621      	mov	r1, r4
 8002790:	eb12 0801 	adds.w	r8, r2, r1
 8002794:	4629      	mov	r1, r5
 8002796:	eb43 0901 	adc.w	r9, r3, r1
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027ae:	4690      	mov	r8, r2
 80027b0:	4699      	mov	r9, r3
 80027b2:	4623      	mov	r3, r4
 80027b4:	eb18 0303 	adds.w	r3, r8, r3
 80027b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80027bc:	462b      	mov	r3, r5
 80027be:	eb49 0303 	adc.w	r3, r9, r3
 80027c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80027d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80027d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80027da:	460b      	mov	r3, r1
 80027dc:	18db      	adds	r3, r3, r3
 80027de:	653b      	str	r3, [r7, #80]	@ 0x50
 80027e0:	4613      	mov	r3, r2
 80027e2:	eb42 0303 	adc.w	r3, r2, r3
 80027e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80027e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80027ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80027f0:	f7fd fd08 	bl	8000204 <__aeabi_uldivmod>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4b61      	ldr	r3, [pc, #388]	@ (8002980 <UART_SetConfig+0x2d4>)
 80027fa:	fba3 2302 	umull	r2, r3, r3, r2
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	011c      	lsls	r4, r3, #4
 8002802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002806:	2200      	movs	r2, #0
 8002808:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800280c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002810:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002814:	4642      	mov	r2, r8
 8002816:	464b      	mov	r3, r9
 8002818:	1891      	adds	r1, r2, r2
 800281a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800281c:	415b      	adcs	r3, r3
 800281e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002820:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002824:	4641      	mov	r1, r8
 8002826:	eb12 0a01 	adds.w	sl, r2, r1
 800282a:	4649      	mov	r1, r9
 800282c:	eb43 0b01 	adc.w	fp, r3, r1
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800283c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002840:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002844:	4692      	mov	sl, r2
 8002846:	469b      	mov	fp, r3
 8002848:	4643      	mov	r3, r8
 800284a:	eb1a 0303 	adds.w	r3, sl, r3
 800284e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002852:	464b      	mov	r3, r9
 8002854:	eb4b 0303 	adc.w	r3, fp, r3
 8002858:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800285c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002868:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800286c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002870:	460b      	mov	r3, r1
 8002872:	18db      	adds	r3, r3, r3
 8002874:	643b      	str	r3, [r7, #64]	@ 0x40
 8002876:	4613      	mov	r3, r2
 8002878:	eb42 0303 	adc.w	r3, r2, r3
 800287c:	647b      	str	r3, [r7, #68]	@ 0x44
 800287e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002882:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002886:	f7fd fcbd 	bl	8000204 <__aeabi_uldivmod>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4611      	mov	r1, r2
 8002890:	4b3b      	ldr	r3, [pc, #236]	@ (8002980 <UART_SetConfig+0x2d4>)
 8002892:	fba3 2301 	umull	r2, r3, r3, r1
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	2264      	movs	r2, #100	@ 0x64
 800289a:	fb02 f303 	mul.w	r3, r2, r3
 800289e:	1acb      	subs	r3, r1, r3
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80028a6:	4b36      	ldr	r3, [pc, #216]	@ (8002980 <UART_SetConfig+0x2d4>)
 80028a8:	fba3 2302 	umull	r2, r3, r3, r2
 80028ac:	095b      	lsrs	r3, r3, #5
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80028b4:	441c      	add	r4, r3
 80028b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028ba:	2200      	movs	r2, #0
 80028bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80028c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80028c8:	4642      	mov	r2, r8
 80028ca:	464b      	mov	r3, r9
 80028cc:	1891      	adds	r1, r2, r2
 80028ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028d0:	415b      	adcs	r3, r3
 80028d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80028d8:	4641      	mov	r1, r8
 80028da:	1851      	adds	r1, r2, r1
 80028dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80028de:	4649      	mov	r1, r9
 80028e0:	414b      	adcs	r3, r1
 80028e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80028f0:	4659      	mov	r1, fp
 80028f2:	00cb      	lsls	r3, r1, #3
 80028f4:	4651      	mov	r1, sl
 80028f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028fa:	4651      	mov	r1, sl
 80028fc:	00ca      	lsls	r2, r1, #3
 80028fe:	4610      	mov	r0, r2
 8002900:	4619      	mov	r1, r3
 8002902:	4603      	mov	r3, r0
 8002904:	4642      	mov	r2, r8
 8002906:	189b      	adds	r3, r3, r2
 8002908:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800290c:	464b      	mov	r3, r9
 800290e:	460a      	mov	r2, r1
 8002910:	eb42 0303 	adc.w	r3, r2, r3
 8002914:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002924:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002928:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800292c:	460b      	mov	r3, r1
 800292e:	18db      	adds	r3, r3, r3
 8002930:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002932:	4613      	mov	r3, r2
 8002934:	eb42 0303 	adc.w	r3, r2, r3
 8002938:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800293a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800293e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002942:	f7fd fc5f 	bl	8000204 <__aeabi_uldivmod>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4b0d      	ldr	r3, [pc, #52]	@ (8002980 <UART_SetConfig+0x2d4>)
 800294c:	fba3 1302 	umull	r1, r3, r3, r2
 8002950:	095b      	lsrs	r3, r3, #5
 8002952:	2164      	movs	r1, #100	@ 0x64
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	3332      	adds	r3, #50	@ 0x32
 800295e:	4a08      	ldr	r2, [pc, #32]	@ (8002980 <UART_SetConfig+0x2d4>)
 8002960:	fba2 2303 	umull	r2, r3, r2, r3
 8002964:	095b      	lsrs	r3, r3, #5
 8002966:	f003 0207 	and.w	r2, r3, #7
 800296a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4422      	add	r2, r4
 8002972:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002974:	e106      	b.n	8002b84 <UART_SetConfig+0x4d8>
 8002976:	bf00      	nop
 8002978:	40011000 	.word	0x40011000
 800297c:	40011400 	.word	0x40011400
 8002980:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002988:	2200      	movs	r2, #0
 800298a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800298e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002992:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002996:	4642      	mov	r2, r8
 8002998:	464b      	mov	r3, r9
 800299a:	1891      	adds	r1, r2, r2
 800299c:	6239      	str	r1, [r7, #32]
 800299e:	415b      	adcs	r3, r3
 80029a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029a6:	4641      	mov	r1, r8
 80029a8:	1854      	adds	r4, r2, r1
 80029aa:	4649      	mov	r1, r9
 80029ac:	eb43 0501 	adc.w	r5, r3, r1
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	00eb      	lsls	r3, r5, #3
 80029ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029be:	00e2      	lsls	r2, r4, #3
 80029c0:	4614      	mov	r4, r2
 80029c2:	461d      	mov	r5, r3
 80029c4:	4643      	mov	r3, r8
 80029c6:	18e3      	adds	r3, r4, r3
 80029c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029cc:	464b      	mov	r3, r9
 80029ce:	eb45 0303 	adc.w	r3, r5, r3
 80029d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80029d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80029f2:	4629      	mov	r1, r5
 80029f4:	008b      	lsls	r3, r1, #2
 80029f6:	4621      	mov	r1, r4
 80029f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029fc:	4621      	mov	r1, r4
 80029fe:	008a      	lsls	r2, r1, #2
 8002a00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a04:	f7fd fbfe 	bl	8000204 <__aeabi_uldivmod>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4b60      	ldr	r3, [pc, #384]	@ (8002b90 <UART_SetConfig+0x4e4>)
 8002a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	011c      	lsls	r4, r3, #4
 8002a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a28:	4642      	mov	r2, r8
 8002a2a:	464b      	mov	r3, r9
 8002a2c:	1891      	adds	r1, r2, r2
 8002a2e:	61b9      	str	r1, [r7, #24]
 8002a30:	415b      	adcs	r3, r3
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a38:	4641      	mov	r1, r8
 8002a3a:	1851      	adds	r1, r2, r1
 8002a3c:	6139      	str	r1, [r7, #16]
 8002a3e:	4649      	mov	r1, r9
 8002a40:	414b      	adcs	r3, r1
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a50:	4659      	mov	r1, fp
 8002a52:	00cb      	lsls	r3, r1, #3
 8002a54:	4651      	mov	r1, sl
 8002a56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a5a:	4651      	mov	r1, sl
 8002a5c:	00ca      	lsls	r2, r1, #3
 8002a5e:	4610      	mov	r0, r2
 8002a60:	4619      	mov	r1, r3
 8002a62:	4603      	mov	r3, r0
 8002a64:	4642      	mov	r2, r8
 8002a66:	189b      	adds	r3, r3, r2
 8002a68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a6c:	464b      	mov	r3, r9
 8002a6e:	460a      	mov	r2, r1
 8002a70:	eb42 0303 	adc.w	r3, r2, r3
 8002a74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002a90:	4649      	mov	r1, r9
 8002a92:	008b      	lsls	r3, r1, #2
 8002a94:	4641      	mov	r1, r8
 8002a96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a9a:	4641      	mov	r1, r8
 8002a9c:	008a      	lsls	r2, r1, #2
 8002a9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002aa2:	f7fd fbaf 	bl	8000204 <__aeabi_uldivmod>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4b38      	ldr	r3, [pc, #224]	@ (8002b90 <UART_SetConfig+0x4e4>)
 8002aae:	fba3 2301 	umull	r2, r3, r3, r1
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2264      	movs	r2, #100	@ 0x64
 8002ab6:	fb02 f303 	mul.w	r3, r2, r3
 8002aba:	1acb      	subs	r3, r1, r3
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	3332      	adds	r3, #50	@ 0x32
 8002ac0:	4a33      	ldr	r2, [pc, #204]	@ (8002b90 <UART_SetConfig+0x4e4>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002acc:	441c      	add	r4, r3
 8002ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ad6:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ad8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002adc:	4642      	mov	r2, r8
 8002ade:	464b      	mov	r3, r9
 8002ae0:	1891      	adds	r1, r2, r2
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	415b      	adcs	r3, r3
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002aec:	4641      	mov	r1, r8
 8002aee:	1851      	adds	r1, r2, r1
 8002af0:	6039      	str	r1, [r7, #0]
 8002af2:	4649      	mov	r1, r9
 8002af4:	414b      	adcs	r3, r1
 8002af6:	607b      	str	r3, [r7, #4]
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b04:	4659      	mov	r1, fp
 8002b06:	00cb      	lsls	r3, r1, #3
 8002b08:	4651      	mov	r1, sl
 8002b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b0e:	4651      	mov	r1, sl
 8002b10:	00ca      	lsls	r2, r1, #3
 8002b12:	4610      	mov	r0, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	4603      	mov	r3, r0
 8002b18:	4642      	mov	r2, r8
 8002b1a:	189b      	adds	r3, r3, r2
 8002b1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b1e:	464b      	mov	r3, r9
 8002b20:	460a      	mov	r2, r1
 8002b22:	eb42 0303 	adc.w	r3, r2, r3
 8002b26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b32:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b40:	4649      	mov	r1, r9
 8002b42:	008b      	lsls	r3, r1, #2
 8002b44:	4641      	mov	r1, r8
 8002b46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b4a:	4641      	mov	r1, r8
 8002b4c:	008a      	lsls	r2, r1, #2
 8002b4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b52:	f7fd fb57 	bl	8000204 <__aeabi_uldivmod>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b90 <UART_SetConfig+0x4e4>)
 8002b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b60:	095b      	lsrs	r3, r3, #5
 8002b62:	2164      	movs	r1, #100	@ 0x64
 8002b64:	fb01 f303 	mul.w	r3, r1, r3
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	3332      	adds	r3, #50	@ 0x32
 8002b6e:	4a08      	ldr	r2, [pc, #32]	@ (8002b90 <UART_SetConfig+0x4e4>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	095b      	lsrs	r3, r3, #5
 8002b76:	f003 020f 	and.w	r2, r3, #15
 8002b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4422      	add	r2, r4
 8002b82:	609a      	str	r2, [r3, #8]
}
 8002b84:	bf00      	nop
 8002b86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b90:	51eb851f 	.word	0x51eb851f

08002b94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b94:	b084      	sub	sp, #16
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b084      	sub	sp, #16
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	f107 001c 	add.w	r0, r7, #28
 8002ba2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ba6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d123      	bne.n	8002bf6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002bc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002bd6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d105      	bne.n	8002bea <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fa9a 	bl	8003124 <USB_CoreReset>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	73fb      	strb	r3, [r7, #15]
 8002bf4:	e01b      	b.n	8002c2e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fa8e 	bl	8003124 <USB_CoreReset>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002c0c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d106      	bne.n	8002c22 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c18:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c20:	e005      	b.n	8002c2e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c26:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002c2e:	7fbb      	ldrb	r3, [r7, #30]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d10b      	bne.n	8002c4c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f043 0206 	orr.w	r2, r3, #6
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f043 0220 	orr.w	r2, r3, #32
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c58:	b004      	add	sp, #16
 8002c5a:	4770      	bx	lr

08002c5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f023 0201 	bic.w	r2, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b084      	sub	sp, #16
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
 8002c86:	460b      	mov	r3, r1
 8002c88:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002c9a:	78fb      	ldrb	r3, [r7, #3]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d115      	bne.n	8002ccc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002cac:	200a      	movs	r0, #10
 8002cae:	f7fd ff8f 	bl	8000bd0 <HAL_Delay>
      ms += 10U;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	330a      	adds	r3, #10
 8002cb6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fa25 	bl	8003108 <USB_GetMode>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d01e      	beq.n	8002d02 <USB_SetCurrentMode+0x84>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2bc7      	cmp	r3, #199	@ 0xc7
 8002cc8:	d9f0      	bls.n	8002cac <USB_SetCurrentMode+0x2e>
 8002cca:	e01a      	b.n	8002d02 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d115      	bne.n	8002cfe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002cde:	200a      	movs	r0, #10
 8002ce0:	f7fd ff76 	bl	8000bd0 <HAL_Delay>
      ms += 10U;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	330a      	adds	r3, #10
 8002ce8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fa0c 	bl	8003108 <USB_GetMode>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <USB_SetCurrentMode+0x84>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2bc7      	cmp	r3, #199	@ 0xc7
 8002cfa:	d9f0      	bls.n	8002cde <USB_SetCurrentMode+0x60>
 8002cfc:	e001      	b.n	8002d02 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e005      	b.n	8002d0e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2bc8      	cmp	r3, #200	@ 0xc8
 8002d06:	d101      	bne.n	8002d0c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e000      	b.n	8002d0e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d18:	b084      	sub	sp, #16
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b086      	sub	sp, #24
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002d26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	e009      	b.n	8002d4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	3340      	adds	r3, #64	@ 0x40
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	2200      	movs	r2, #0
 8002d44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	2b0e      	cmp	r3, #14
 8002d50:	d9f2      	bls.n	8002d38 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002d52:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d11c      	bne.n	8002d94 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d68:	f043 0302 	orr.w	r3, r3, #2
 8002d6c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d72:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	e005      	b.n	8002da0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d98:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002da6:	461a      	mov	r2, r3
 8002da8:	2300      	movs	r3, #0
 8002daa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002dac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d10d      	bne.n	8002dd0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002db4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d104      	bne.n	8002dc6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f968 	bl	8003094 <USB_SetDevSpeed>
 8002dc4:	e008      	b.n	8002dd8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f963 	bl	8003094 <USB_SetDevSpeed>
 8002dce:	e003      	b.n	8002dd8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002dd0:	2103      	movs	r1, #3
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f95e 	bl	8003094 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002dd8:	2110      	movs	r1, #16
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f8fa 	bl	8002fd4 <USB_FlushTxFifo>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f924 	bl	8003038 <USB_FlushRxFifo>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e00:	461a      	mov	r2, r3
 8002e02:	2300      	movs	r3, #0
 8002e04:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	2300      	movs	r3, #0
 8002e10:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e18:	461a      	mov	r2, r3
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	e043      	b.n	8002eac <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e3a:	d118      	bne.n	8002e6e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10a      	bne.n	8002e58 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	e013      	b.n	8002e80 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	015a      	lsls	r2, r3, #5
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e64:	461a      	mov	r2, r3
 8002e66:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	e008      	b.n	8002e80 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	015a      	lsls	r2, r3, #5
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	2300      	movs	r3, #0
 8002e90:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002ea4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	613b      	str	r3, [r7, #16]
 8002eac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d3b5      	bcc.n	8002e24 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002eb8:	2300      	movs	r3, #0
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	e043      	b.n	8002f46 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ed0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ed4:	d118      	bne.n	8002f08 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10a      	bne.n	8002ef2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ee8:	461a      	mov	r2, r3
 8002eea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	e013      	b.n	8002f1a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002efe:	461a      	mov	r2, r3
 8002f00:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e008      	b.n	8002f1a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	015a      	lsls	r2, r3, #5
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4413      	add	r3, r2
 8002f10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f14:	461a      	mov	r2, r3
 8002f16:	2300      	movs	r3, #0
 8002f18:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f26:	461a      	mov	r2, r3
 8002f28:	2300      	movs	r3, #0
 8002f2a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	015a      	lsls	r2, r3, #5
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f38:	461a      	mov	r2, r3
 8002f3a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	3301      	adds	r3, #1
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d3b5      	bcc.n	8002ebe <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f64:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8002f72:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002f74:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d105      	bne.n	8002f88 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	f043 0210 	orr.w	r2, r3, #16
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	699a      	ldr	r2, [r3, #24]
 8002f8c:	4b10      	ldr	r3, [pc, #64]	@ (8002fd0 <USB_DevInit+0x2b8>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002f94:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	f043 0208 	orr.w	r2, r3, #8
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002fa8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d107      	bne.n	8002fc0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002fb8:	f043 0304 	orr.w	r3, r3, #4
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fcc:	b004      	add	sp, #16
 8002fce:	4770      	bx	lr
 8002fd0:	803c3800 	.word	0x803c3800

08002fd4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002fee:	d901      	bls.n	8002ff4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e01b      	b.n	800302c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	daf2      	bge.n	8002fe2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	019b      	lsls	r3, r3, #6
 8003004:	f043 0220 	orr.w	r2, r3, #32
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	3301      	adds	r3, #1
 8003010:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003018:	d901      	bls.n	800301e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e006      	b.n	800302c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	2b20      	cmp	r3, #32
 8003028:	d0f0      	beq.n	800300c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	3301      	adds	r3, #1
 8003048:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003050:	d901      	bls.n	8003056 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e018      	b.n	8003088 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	2b00      	cmp	r3, #0
 800305c:	daf2      	bge.n	8003044 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2210      	movs	r2, #16
 8003066:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	3301      	adds	r3, #1
 800306c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003074:	d901      	bls.n	800307a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e006      	b.n	8003088 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f003 0310 	and.w	r3, r3, #16
 8003082:	2b10      	cmp	r3, #16
 8003084:	d0f0      	beq.n	8003068 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	68f9      	ldr	r1, [r7, #12]
 80030b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80030b4:	4313      	orrs	r3, r2
 80030b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b085      	sub	sp, #20
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80030e0:	f023 0303 	bic.w	r3, r3, #3
 80030e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030f4:	f043 0302 	orr.w	r3, r3, #2
 80030f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	f003 0301 	and.w	r3, r3, #1
}
 8003118:	4618      	mov	r0, r3
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	3301      	adds	r3, #1
 8003134:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800313c:	d901      	bls.n	8003142 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e01b      	b.n	800317a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	2b00      	cmp	r3, #0
 8003148:	daf2      	bge.n	8003130 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f043 0201 	orr.w	r2, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3301      	adds	r3, #1
 800315e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003166:	d901      	bls.n	800316c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e006      	b.n	800317a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b01      	cmp	r3, #1
 8003176:	d0f0      	beq.n	800315a <USB_CoreReset+0x36>

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <memset>:
 8003186:	4402      	add	r2, r0
 8003188:	4603      	mov	r3, r0
 800318a:	4293      	cmp	r3, r2
 800318c:	d100      	bne.n	8003190 <memset+0xa>
 800318e:	4770      	bx	lr
 8003190:	f803 1b01 	strb.w	r1, [r3], #1
 8003194:	e7f9      	b.n	800318a <memset+0x4>
	...

08003198 <__libc_init_array>:
 8003198:	b570      	push	{r4, r5, r6, lr}
 800319a:	4d0d      	ldr	r5, [pc, #52]	@ (80031d0 <__libc_init_array+0x38>)
 800319c:	4c0d      	ldr	r4, [pc, #52]	@ (80031d4 <__libc_init_array+0x3c>)
 800319e:	1b64      	subs	r4, r4, r5
 80031a0:	10a4      	asrs	r4, r4, #2
 80031a2:	2600      	movs	r6, #0
 80031a4:	42a6      	cmp	r6, r4
 80031a6:	d109      	bne.n	80031bc <__libc_init_array+0x24>
 80031a8:	4d0b      	ldr	r5, [pc, #44]	@ (80031d8 <__libc_init_array+0x40>)
 80031aa:	4c0c      	ldr	r4, [pc, #48]	@ (80031dc <__libc_init_array+0x44>)
 80031ac:	f000 f818 	bl	80031e0 <_init>
 80031b0:	1b64      	subs	r4, r4, r5
 80031b2:	10a4      	asrs	r4, r4, #2
 80031b4:	2600      	movs	r6, #0
 80031b6:	42a6      	cmp	r6, r4
 80031b8:	d105      	bne.n	80031c6 <__libc_init_array+0x2e>
 80031ba:	bd70      	pop	{r4, r5, r6, pc}
 80031bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c0:	4798      	blx	r3
 80031c2:	3601      	adds	r6, #1
 80031c4:	e7ee      	b.n	80031a4 <__libc_init_array+0xc>
 80031c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ca:	4798      	blx	r3
 80031cc:	3601      	adds	r6, #1
 80031ce:	e7f2      	b.n	80031b6 <__libc_init_array+0x1e>
 80031d0:	08003218 	.word	0x08003218
 80031d4:	08003218 	.word	0x08003218
 80031d8:	08003218 	.word	0x08003218
 80031dc:	0800321c 	.word	0x0800321c

080031e0 <_init>:
 80031e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e2:	bf00      	nop
 80031e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031e6:	bc08      	pop	{r3}
 80031e8:	469e      	mov	lr, r3
 80031ea:	4770      	bx	lr

080031ec <_fini>:
 80031ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ee:	bf00      	nop
 80031f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031f2:	bc08      	pop	{r3}
 80031f4:	469e      	mov	lr, r3
 80031f6:	4770      	bx	lr
